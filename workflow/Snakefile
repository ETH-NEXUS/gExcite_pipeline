# Define minimum Snakemake Version
from snakemake.utils import min_version
min_version("6.12.1")


# Include Config file
configfile: "config/config.yaml"

# Include report functionality
report: "../report/workflow.rst"

# This file includes common functions used in the pipeline
include: "rules/misc_snake.smk"

## Include the scampi module
module scampi:
    skip_validation: True 
    snakefile: "/cluster/work/nexus/internal_projects/scAmpi_restructuring/test_linda/scAmpi_single_cell_RNA/workflow/snakefile_basic.smk"
    config: config["scampi"]

## Include the preprocessing rules
include: "rules/gex_cellranger.smk"
include: "rules/adt_cellranger.smk"
include: "rules/adt_hashing.smk"
## Include scampi
include: "rules/scampi_module.smk"
##Â Include citseq rules
include: "rules/adt_analyse_citeseq.smk"

# This rule defines which files should be created
localrules:
    gExcite,


rule gExcite:
    input:
        # Final files from preprocessing
        expand('results/cellranger_gex/{sample}.{demultiplexed}.matrix.mtx', sample = HashedSamples, demultiplexed = getDemultiplexedSamples()),
        expand('results/cellranger_gex/{sample}.{demultiplexed}.barcodes.tsv', sample = HashedSamples, demultiplexed = getDemultiplexedSamples()),
        expand('results/cellranger_gex/{sample}.{demultiplexed}.features.tsv', sample = HashedSamples, demultiplexed = getDemultiplexedSamples()),
        expand('results/cellranger_adt/{sample}.{demultiplexed}.matrix.mtx', sample=HashedSamples , demultiplexed = getDemultiplexedSamples()),
        expand('results/cellranger_adt/{sample}.{demultiplexed}.barcodes.tsv', sample=HashedSamples , demultiplexed = getDemultiplexedSamples()),
        expand('results/cellranger_adt/{sample}.{demultiplexed}.features.tsv', sample=HashedSamples , demultiplexed = getDemultiplexedSamples()),
        # List of final files from scampi
        expand('results/counts_raw/{sample}.{demultiplexed}.h5', sample = HashedSamples, demultiplexed = getDemultiplexedSamples()),
        expand('results/counts_filtered/{sample}.{demultiplexed}.doublet_barcodes.txt', sample = HashedSamples, demultiplexed = getDemultiplexedSamples()),
        expand('results/counts_raw/{sample}.{demultiplexed}.h5.histogram_library_sizes.png', sample = HashedSamples, demultiplexed = getDemultiplexedSamples()),
        expand('results/counts_corrected/{sample}.{demultiplexed}.corrected.RDS', sample = HashedSamples, demultiplexed = getDemultiplexedSamples()),
        expand('results/clustering/{sample}.{demultiplexed}.clusters_phenograph.csv', sample = HashedSamples, demultiplexed = getDemultiplexedSamples()),
        expand('results/gene_exp/{sample}.{demultiplexed}.gene_expression_per_cluster.tsv', sample = HashedSamples, demultiplexed = getDemultiplexedSamples()),
        expand('results/plotting/{sample}.{demultiplexed}.celltype_barplot.png', sample = HashedSamples, demultiplexed = getDemultiplexedSamples()),
        expand('results/gsva/{sample}.{demultiplexed}.gsetscore_hm.png', sample = HashedSamples, demultiplexed = getDemultiplexedSamples()),
        # List of final files from citeseq analysis
        expand('results/citeseq_analysis/{sample}.{demultiplexed}/{sample}.{demultiplexed}.GEX_cellrangerADT_SCE.RDS', sample = HashedSamples, demultiplexed = getDemultiplexedSamples())
    output:
        "results/complete_gExcite.txt",
    resources:
        mem_mb=1000,
        time=1
    benchmark:
        "results/complete_gExcite.benchmark"
    shell:
        "date > {output} "
