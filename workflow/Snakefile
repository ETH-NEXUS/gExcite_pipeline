# Define minimum Snakemake Version
from snakemake.utils import min_version
min_version("6.12.1")


# Include Config file
configfile: "config/config.yaml"

# Include report functionality
report: "../report/workflow.rst"

# This file includes common functions used in the pipeline
include: "rules/misc_snake.smk"

## Include scampi as a module
module scampi:
    skip_validation: True 
    snakefile: github("ETH-NEXUS/scAmpi_single_cell_RNA", path="workflow/snakefile_basic.smk", tag = "v2.0.4")
    config: config["scampi"]

## Include the preprocessing rules
include: "rules/gex_cellranger.smk"
include: "rules/adt_cellranger.smk"
include: "rules/adt_hashing.smk"
## Include scampi
include: "rules/scampi_module.smk"
##Â Include citseq rules
include: "rules/adt_analyse_citeseq.smk"

# This rule defines which files should be created
localrules:
    gExcite,


rule gExcite:
    input:
        # Final files from preprocessing
        expand('results/cellranger_gex/{demultiplexed}.matrix.mtx',  demultiplexed = getCompleteSampleNames()),
        expand('results/cellranger_gex/{demultiplexed}.barcodes.tsv',  demultiplexed = getCompleteSampleNames()),
        expand('results/cellranger_gex/{demultiplexed}.features.tsv',  demultiplexed = getCompleteSampleNames()),
        expand('results/cellranger_adt/{demultiplexed}.matrix.mtx',  demultiplexed = getCompleteSampleNames()),
        expand('results/cellranger_adt/{demultiplexed}.barcodes.tsv',  demultiplexed = getCompleteSampleNames()),
        expand('results/cellranger_adt/{demultiplexed}.features.tsv',  demultiplexed = getCompleteSampleNames()),
        # List of final files from scampi
        expand('results/counts_raw/{demultiplexed}.h5',  demultiplexed = getCompleteSampleNames()),
        expand('results/counts_filtered/{demultiplexed}.doublet_barcodes.txt',  demultiplexed = getCompleteSampleNames()),
        expand('results/counts_raw/{demultiplexed}.raw.histogram_library_sizes.png',  demultiplexed = getCompleteSampleNames()),
        expand('results/counts_corrected/{demultiplexed}.corrected.RDS',  demultiplexed = getCompleteSampleNames()),
        expand('results/clustering/{demultiplexed}.clusters_phenograph.csv',  demultiplexed = getCompleteSampleNames()),
        expand('results/gene_exp/{demultiplexed}.gene_expression_per_cluster.tsv',  demultiplexed = getCompleteSampleNames()),
        expand('results/plotting/{demultiplexed}.celltype_barplot.png',  demultiplexed = getCompleteSampleNames()),
        expand('results/gsva/{demultiplexed}.gsetscore_hm.png',  demultiplexed = getCompleteSampleNames()),
        # List of final files from citeseq analysis
        expand('results/citeseq_analysis/{demultiplexed}/{demultiplexed}.GEX_cellrangerADT_SCE.RDS',  demultiplexed = getCompleteSampleNames())
    output:
        "results/complete_gExcite.txt",
    resources:
        mem_mb=1000,
        time=1
    benchmark:
        "results/complete_gExcite.benchmark"
    shell:
        "date > {output} "
